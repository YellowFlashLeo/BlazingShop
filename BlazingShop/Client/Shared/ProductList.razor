@using BlazingShop.Shared
@inject IProductService _productService
@implements IDisposable

@if (_productService.Products == null || _productService.Products.Count == 0)
{
    <span>@_productService.Message</span>
}
else
{
    <ul class="list-unstyled">
        @foreach (var product in _productService.Products)
        {
            <li class="media my-3">
                <div class="media-img-wrapper mr-2">
                    <a href="/product/@product.Id">
                        <img class="media-img" src="@product.ImageUrl" alt="@product.Title"/>
                    </a>
                </div>
                <div class="media-body">
                    <a href="/product/@product.Id">
                        <h4 class="mb-0">@product.Title</h4>
                    </a>
                    <p>@product.Description</p>
                    <h5 class="price">
                        @GetPriceText(product)
                    </h5>
                </div>
            </li>
        }
    </ul>
    for (int i = 1; i <= _productService.PageCount; i++)
    {
        <a class="btn
           page-selection
           @(i == _productService.CurrentPage ? "btn-info" : "btn-outline-info")"
           href="/search/@_productService.LastSearchText/@i">@i</a>
    }
}




@code {
    // we do the same call higher or earlier in index.razor thats why we dont need call here
    // await _productService.GetProducts();
    protected override void  OnInitialized()
    {
         // so that when url changes and index.razor calls corresponding controller and returns 
        // another list , we need to inform page about state change by using delegate event contract.
        _productService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        _productService.ProductsChanged -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if (variants.Count == 0)
            return string.Empty;

        else if (variants.Count == 1)
            return $"${variants[0].Price}";

        decimal minPrice = variants.Min(v => v.Price);
        return $"Starting at ${minPrice}";
    }
}

